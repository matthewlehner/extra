/* @flow */
//  This file was automatically generated and should not be edited.

export type AddCollectionParams = {|
  name: string,
|};

export type AddContentInput = {|
  body: string,
  channelIds?: ?Array< ?string >,
  collectionId: string,
|};

export type Recurrence =
  "EVERYDAY" |
  "FRIDAY" |
  "MONDAY" |
  "SATURDAY" |
  "SUNDAY" |
  "THURSDAY" |
  "TUESDAY" |
  "WEDNESDAY" |
  "WEEKDAYS" |
  "WEEKENDS";


export type UpdateCollectionParams = {|
  id: string,
  name: string,
|};

export type UpdateContentInput = {|
  body: string,
  channelIds: Array< ?string >,
  id: string,
|};

export type PasswordParams = {|
  current: string,
  new: string,
|};

export type UserParams = {|
  email?: ?string,
  timezone?: ?string,
|};

export type AccountPageQuery = {|
  userPreferences: ? {|
    id: string,
    email: string,
    timezone: ?string,
  |},
|};

export type addCollectionMutationVariables = {|
  input: AddCollectionParams,
|};

export type addCollectionMutation = {|
  addCollection: {|
    collection: ? {|
      id: string,
      name: string,
    |},
    collectionErrors:  Array< {|
      // Path to input field which caused the error
      field: string,
      // The error message
      message: string,
    |} >,
  |},
|};

export type addContentMutationVariables = {|
  input: AddContentInput,
|};

export type addContentMutation = {|
  addContent: {|
    content: ? {|
      id: string,
      body: string,
      collection: ? {|
        id: string,
        name: string,
      |},
      channels:  Array<? {|
        id: string,
        name: string,
      |} >,
    |},
    contentErrors:  Array< {|
      // Path to input field which caused the error
      field: string,
      // The error message
      message: string,
    |} >,
  |},
|};

export type AddTimeslotMutationVariables = {|
  scheduleId: string,
  collectionId: string,
  time: any,
  recurrence: Recurrence,
|};

export type AddTimeslotMutation = {|
  addTimeslot: ? {|
    id: string,
    recurrence: Recurrence,
    time: any,
    collection: {|
      id: string,
      name: string,
    |},
  |},
|};

export type archivePostMutationVariables = {|
  id: string,
|};

export type archivePostMutation = {|
  archivePostContent: ? {|
    id: string,
    collection: ? {|
      id: string,
    |},
  |},
|};

export type ChannelPageQueryVariables = {|
  id: string,
|};

export type ChannelPageQuery = {|
  channel: ? {|
    id: string,
    name: string,
    image: string,
    provider: string,
  |},
  schedule: ? {|
    id: string,
    autopilot: boolean,
    timeslots:  Array<? {|
      id: string,
      time: any,
      recurrence: Recurrence,
      collection: {|
        id: string,
        name: string,
      |},
    |} >,
  |},
  collections: ? Array<? {|
    id: string,
    name: string,
  |} >,
  recurrenceType: ? {|
    enumValues: ? Array< {|
      name: string,
    |} >,
  |},
|};

export type CollectionPageQueryVariables = {|
  id: string,
|};

export type CollectionPageQuery = {|
  collection: ? {|
    id: string,
    name: string,
    posts:  Array<? {|
      id: string,
      body: string,
      channels:  Array<? {|
        id: string,
        name: string,
        provider: string,
        image: string,
      |} >,
    |} >,
  |},
|};

export type editCollectionPageQueryVariables = {|
  id: string,
|};

export type editCollectionPageQuery = {|
  collection: ? {|
    id: string,
    name: string,
  |},
|};

export type getPostContentQueryVariables = {|
  id: string,
|};

export type getPostContentQuery = {|
  channels: ? Array<? {|
    id: string,
    provider: string,
    name: string,
  |} >,
  postContent: ? {|
    id: string,
    body: string,
    collection: ? {|
      id: string,
      name: string,
    |},
    channels:  Array<? {|
      id: string,
    |} >,
  |},
|};

export type NewPostContentFormQueryVariables = {|
  collectionId: string,
|};

export type NewPostContentFormQuery = {|
  collection: ? {|
    id: string,
    name: string,
  |},
  channels: ? Array<? {|
    id: string,
    provider: string,
    name: string,
  |} >,
|};

export type QueuedPostsForChannelQueryVariables = {|
  channelId: string,
|};

export type QueuedPostsForChannelQuery = {|
  queuedPosts: ? Array<? {|
    id: string,
    scheduledFor: any,
    postContent: ? {|
      id: string,
      body: string,
    |},
  |} >,
|};

export type removeTimeslotMutationVariables = {|
  id: string,
|};

export type removeTimeslotMutation = {|
  removeTimeslot: ? {|
    id: string,
  |},
|};

export type SidebarQuery = {|
  channels: ? Array<? {|
    id: string,
    provider: string,
    name: string,
  |} >,
  collections: ? Array<? {|
    id: string,
    name: string,
  |} >,
|};

export type TimeslotFieldsInfoQuery = {|
  collections: ? Array<? {|
    id: string,
    name: string,
  |} >,
  recurrenceType: ? {|
    enumValues: ? Array< {|
      name: string,
    |} >,
  |},
|};

export type updateCollectionMutationVariables = {|
  input: UpdateCollectionParams,
|};

export type updateCollectionMutation = {|
  updateCollection: {|
    collection: ? {|
      id: string,
      name: string,
    |},
    collectionErrors:  Array< {|
      // Path to input field which caused the error
      field: string,
      // The error message
      message: string,
    |} >,
  |},
|};

export type updateContentMutationVariables = {|
  input: UpdateContentInput,
|};

export type updateContentMutation = {|
  updateContent: {|
    content: ? {|
      id: string,
      body: string,
      channels:  Array<? {|
        id: string,
        name: string,
        provider: string,
        image: string,
      |} >,
    |},
    contentErrors:  Array< {|
      // Path to input field which caused the error
      field: string,
      // The error message
      message: string,
    |} >,
  |},
|};

export type UpdateScheduleMutationVariables = {|
  channelId: string,
  autopilot?: ?boolean,
|};

export type UpdateScheduleMutation = {|
  updateSchedule: ? {|
    id: string,
    autopilot: boolean,
  |},
|};

export type updatePasswordMutationVariables = {|
  input: PasswordParams,
|};

export type updatePasswordMutation = {|
  updatePassword: {|
    user: ? {|
      id: string,
      email: string,
    |},
    userErrors:  Array< {|
      // Path to input field which caused the error
      field: string,
      // The error message
      message: string,
    |} >,
  |},
|};

export type updatePreferencesMutationVariables = {|
  input: UserParams,
|};

export type updatePreferencesMutation = {|
  updatePreferences: ? {|
    id: string,
    email: string,
    timezone: ?string,
  |},
|};